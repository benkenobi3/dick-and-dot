package update

import (
	"context"
	"fmt"
	"time"

	"github.com/benkenobi3/dick-and-dot/internal/database/repository"
	"github.com/benkenobi3/dick-and-dot/internal/features/random"
)

func abs(i int64) int64 {
	if i < 0 {
		return -i
	}
	return i
}

func (h *handler) dickCommand(ctx context.Context, userID, chatID int64) (string, error) {
	dick, err := h.dicks.GetDick(ctx, chatID, userID)
	if err != nil {
		return "", fmt.Errorf("error in /dick command: %w", err)
	}

	if dick.UpdatedAt == nil {
		newLength, wasBlessed := random.GetLengthToAdd(true)

		// –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø—Ä–æ—â–∞–µ–º –∏ –Ω–µ –≤—ã–¥–∞–µ–º —Å—Ö–æ–¥—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —á–ª–µ–Ω
		newLength = abs(newLength)

		newDick := repository.Dick{
			UserID: userID,
			ChatID: chatID,
			Length: newLength,
		}
		err = h.dicks.AddDick(ctx, newDick)
		if err != nil {
			return "", fmt.Errorf("cannot add new dick: %w", err)
		}

		if wasBlessed {
			return fmt.Sprintf("ü§°ü§°ü§°ü§°ü§°ü§°ü§°ü§°\n\n"+
				"!!!!–í–ê–£!!!\n"+
				"–ì–û–°–ü–û–î–¨ –ü–û–ì–õ–ê–î–ò–õ –¢–ï–ë–Ø –ü–û –ù–û–í–û–ò–°–ü–ï–ß–Å–ù–ù–û–ô –ì–û–õ–û–í–ö–ï\n"+
				"–ü—Ä–∏–º–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ: %d¬†—Å–º", random.BlessingSize), nil
		}

		return fmt.Sprintf("–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π –ø–∏—Å—é–Ω, –æ–Ω —Ä–∞–≤–µ–Ω %d —Å–º", newLength), nil
	}

	now := time.Now().UTC()
	lastUpdated := dick.UpdatedAt.UTC()

	ableToGrow := now.Day() > lastUpdated.Day() || now.Month() > lastUpdated.Month() || now.Year() > lastUpdated.Year()

	if !ableToGrow {
		return fmt.Sprintf("–ö–∞–∫ –∂–µ –æ–Ω –Ω–∞—è—Ä–∏–≤–∞–µ—Ç...\n–û—Å—Ç—ã–Ω—å, –ø–∏—Å—é–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∑–∞–≤—Ç—Ä–∞"), nil
	}

	lengthToAdd, wasBlessed := random.GetLengthToAdd(true)
	newDick := repository.Dick{
		UserID: userID,
		ChatID: chatID,
		Length: lengthToAdd,
	}
	err = h.dicks.AddDick(ctx, newDick)
	if err != nil {
		return "", fmt.Errorf("cannot add new dick: %w", err)
	}

	if wasBlessed {
		return fmt.Sprintf("ü§°ü§°ü§°ü§°ü§°ü§°ü§°ü§°\n\n"+
			"!!!!–í–ê–£!!!\n"+
			"–ì–û–°–ü–û–î–¨ –ü–û–ì–õ–ê–î–ò–õ –¢–ï–ë–Ø –ü–û –ì–û–õ–û–í–ö–ï\n"+
			"–ü—Ä–∏–º–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ: +%d¬†—Å–º\n"+
			"–¢–≤–æ–π –ø–∏–ø–∏–¥–∞—Å—Ç—Ä —Ä–∞–∑–º–µ—Ä–æ–º –≤ %d¬†—Å–º –≤–∑–ª–µ—Ç–µ–ª –Ω–∞ –∞–Ω–≥–µ–ª—å—Å–∫–∏—Ö –∫—Ä—ã–ª—ã—à–∫–∞—Ö",
			random.BlessingSize, dick.Length+random.BlessingSize), nil
	}

	verb := "–≤—ã—Ä–æ—Å"
	if lengthToAdd < 0 {
		verb = "—É–º–µ–Ω—å—à–∏–ª—Å—è"
	}

	return fmt.Sprintf("–¢–≤–æ–π –ø–∏—Å—é–Ω %s –Ω–∞ %d¬†—Å–º, —Ç–µ–ø–µ—Ä—å –æ–Ω —Ä–∞–≤–µ–Ω %d¬†—Å–º",
		verb,
		abs(lengthToAdd),
		dick.Length+lengthToAdd), nil
}
