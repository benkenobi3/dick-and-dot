package update

import (
	"context"
	"fmt"
	"log"
	"sort"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"

	"github.com/benkenobi3/dick-and-dot/internal/database/repository"
	"github.com/benkenobi3/dick-and-dot/internal/features/random"
)

const ErrorMessage = "–ü–µ—Ä–µ–ª–æ–º —á–ª–µ–Ω–∞. –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã"

type handler struct {
	bot   *tgbotapi.BotAPI
	dicks repository.Dicks
}

type Handler interface {
	Handle(ctx context.Context, update tgbotapi.Update)
}

func NewHandler(db *sqlx.DB, bot *tgbotapi.BotAPI) Handler {
	dicks := repository.NewDicks(db)

	return &handler{
		bot:   bot,
		dicks: dicks,
	}
}

func (h *handler) Handle(ctx context.Context, update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	if !update.Message.IsCommand() {
		// ignore any non-command messages
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
	switch update.Message.Command() {
	case "start":
		msg.Text = "–ü–æ—Ä–∞ –º–µ—Ä—è—Ç—å—Å—è –ø–∏—Å—å–∫–∞–º–∏! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ /dick"
	case "help":
		msg.Text = "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø–æ–º–µ—Ä–∏—Ç—å—Å—è –ø–∏—Å—å–∫–∞–º–∏ –≤¬†—á–∞—Ç–µ \n\n" +
			"/dick - –æ—Ç–¥–∞—Ç—å —Å–≤–æ–π –ø–∏—Å—é–Ω –±–æ–≥—É —Ä–∞–Ω–¥–æ–º–∞, –æ–Ω¬†–∏–∑–º–µ–Ω–∏—Ç –µ–≥–æ –æ—Ç -5 –¥–æ +10¬†—Å–º \n" +
			"/top - —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø –ø–∏—Å–µ–∫ –≤¬†—ç—Ç–æ–º —á–∞—Ç–µ \n" +
			"/help - –µ—â–µ —Ä–∞–∑ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ \n\n" +
			"–î–æ–±–∞–≤–ª—è–π –±–æ—Ç –≤¬†—Å–≤–æ–∏ —á–∞—Ç—ã!"
	case "dick":
		text, err := h.dickCommand(ctx, update.Message.From.ID, update.Message.Chat.ID)
		msg.Text = text
		if err != nil {
			log.Println(err)
			msg.Text = ErrorMessage
		}
	case "top":
		text, err := h.topCommand(ctx, update.Message.Chat.ID)
		msg.Text = text
		if err != nil {
			log.Println(err)
			msg.Text = ErrorMessage
		}
	default:
		// ignore unknown command
		return
	}

	if msg.Text == "" {
		return
	}

	_, err := h.bot.Send(msg)
	if err != nil {
		log.Fatal(err)
	}
}

func (h *handler) dickCommand(ctx context.Context, userID, chatID int64) (string, error) {
	allDicks, err := h.dicks.GetDicksByChatId(ctx, chatID)
	if err != nil {
		return "", fmt.Errorf("cannot get dicks for /dick command: %w", err)
	}

	currentDick, exists := allDicks[userID]
	if !exists {
		newLength, wasBlessed := random.GetNewLength(0, true)
		currentDick = repository.Dick{
			UserID: userID,
			ChatID: chatID,
			Length: newLength,
		}
		err = h.dicks.CreateDick(ctx, currentDick)
		if err != nil {
			return "", fmt.Errorf("cannot create new dick: %w", err)
		}

		message := ""
		if wasBlessed {
			message = fmt.Sprintf("ü§°ü§°ü§°ü§°ü§°ü§°ü§°ü§°\n\n"+
				"!!!!–í–ê–£!!!\n"+
				"–ì–û–°–ü–û–î–¨ –ü–û–ì–õ–ê–î–ò–õ –¢–ï–ë–Ø –ü–û –ù–û–í–û–ò–°–ü–ï–ß–Å–ù–ù–û–ô –ì–û–õ–û–í–ö–ï\n"+
				"–ü—Ä–∏–º–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ: %d¬†—Å–º", random.BlessingSize)
		} else {
			message = fmt.Sprintf("–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π –ø–∏—Å—é–Ω, –æ–Ω —Ä–∞–≤–µ–Ω %d —Å–º", currentDick.Length)
		}
		return message, nil
	}

	lastUpd := currentDick.UpdatedAt
	now := time.Now().UTC()
	ableToGrow := now.Day() > lastUpd.Day() || now.Month() > lastUpd.Month() || now.Year() > lastUpd.Year()

	if !ableToGrow {
		return fmt.Sprintf("–ö–∞–∫ –∂–µ –æ–Ω –Ω–∞—è—Ä–∏–≤–∞–µ—Ç...\n–û—Å—Ç—ã–Ω—å, –ø–∏—Å—é–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∑–∞–≤—Ç—Ä–∞"), nil
	}

	posForDick := getTopPosition(allDicks, userID)
	canBeBlessed := posForDick > 1
	newLength, wasBlessed := random.GetNewLength(currentDick.Length, canBeBlessed)
	diffLength := newLength - currentDick.Length

	currentDick.Length = newLength
	err = h.dicks.UpdateDick(ctx, currentDick)
	if err != nil {
		return "", fmt.Errorf("cannot update dick: %w", err)
	}

	allDicks[userID] = currentDick
	posForDick = getTopPosition(allDicks, userID)

	message := ""
	if wasBlessed {
		message = fmt.Sprintf("ü§°ü§°ü§°ü§°ü§°ü§°ü§°ü§°\n\n"+
			"!!!!–í–ê–£!!!\n"+
			"–ì–û–°–ü–û–î–¨ –ü–û–ì–õ–ê–î–ò–õ –¢–ï–ë–Ø –ü–û –ì–û–õ–û–í–ö–ï\n"+
			"–ü—Ä–∏–º–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ: +%d¬†—Å–º\n"+
			"–¢–≤–æ–π –ø–∏–ø–∏–¥–∞—Å—Ç—Ä —Ä–∞–∑–º–µ—Ä–æ–º –≤ %d¬†—Å–º –≤–∑–ª–µ—Ç–µ–ª –Ω–∞ –∞–Ω–≥–µ–ª—å—Å–∫–∏—Ö –∫—Ä—ã–ª—ã—à–∫–∞—Ö –ø—Ä—è–º–∏–∫–æ–º –Ω–∞ %d¬†–º–µ—Å—Ç–æ",
			random.BlessingSize, currentDick.Length, posForDick)
	} else {
		verb := "–≤—ã—Ä–æ—Å"
		if diffLength < 0 {
			verb = "—É–º–µ–Ω—å—à–∏–ª—Å—è"
			diffLength *= -1
		}
		message = fmt.Sprintf("–¢–≤–æ–π –ø–∏—Å—é–Ω %s –Ω–∞ %d¬†—Å–º, —Ç–µ–ø–µ—Ä—å –æ–Ω —Ä–∞–≤–µ–Ω %d¬†—Å–º.\n"+
			"–û–Ω —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç —á–∞—Ä—Ç—ã: %d¬†–º–µ—Å—Ç–æ", verb, diffLength, currentDick.Length, posForDick)
	}

	return message, nil
}

func (h *handler) topCommand(ctx context.Context, chatID int64) (string, error) {

	allDicks, err := h.dicks.GetDicksByChatId(ctx, chatID)
	if err != nil {
		return "", fmt.Errorf("cannot get dicks for /dick command: %w", err)
	}

	sortedDicks := sortDicks(allDicks)
	if len(sortedDicks) > 15 {
		sortedDicks = sortedDicks[:15] // cut to top 15 dicks
	}

	finalText := "–¢–æ–ø 15 —á–ª–µ–Ω–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞: \n\n"
	topPos := topPositions(sortedDicks)
	for idx, dick := range sortedDicks {
		config := tgbotapi.GetChatMemberConfig{
			ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
				ChatID: dick.ChatID,
				UserID: dick.UserID,
			},
		}

		chatMember, err := h.bot.GetChatMember(config)
		if err != nil {
			return "", fmt.Errorf("cannot get chat for /dick command: %w", err)
		}

		userName := chatMember.User.FirstName
		if chatMember.User.LastName != "" {
			userName = fmt.Sprintf("%s %s", userName, chatMember.User.LastName)
		}

		finalText += fmt.Sprintf("%d | %s - –ø–∏—Å—å–∫–∞ —Ä–∞–≤–Ω–∞ %d¬†—Å–º \n", topPos[idx], userName, dick.Length)
	}

	return finalText, nil
}

func topPositions(sortedDicks []repository.Dick) []int {
	if len(sortedDicks) == 0 {
		return []int{}
	}

	topPos := 1
	positions := make([]int, 0, len(sortedDicks))
	positions = append(positions, topPos)

	for idx, dick := range sortedDicks {
		if idx != 0 {
			if dick.Length != sortedDicks[idx-1].Length {
				topPos++
			}
			positions = append(positions, topPos)
		}
	}

	return positions
}

func sortDicks(allDicks map[int64]repository.Dick) []repository.Dick {
	sortedDicks := make([]repository.Dick, 0, len(allDicks))
	for _, dick := range allDicks {
		sortedDicks = append(sortedDicks, dick)
	}

	if len(sortedDicks) < 2 {
		return sortedDicks
	}

	sort.SliceStable(sortedDicks, func(i, j int) bool {
		return sortedDicks[i].Length > sortedDicks[j].Length
	})

	return sortedDicks
}

func getTopPosition(allDicks map[int64]repository.Dick, userID int64) int {
	sortedDicks := sortDicks(allDicks)
	topPos := topPositions(sortedDicks)
	for i, dick := range sortedDicks {
		if dick.UserID == userID {
			return topPos[i]
		}
	}
	return -1
}
